"use strict";(self.webpackChunk_upscalerjs_docs=self.webpackChunk_upscalerjs_docs||[]).push([[3610],{54852:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(49231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||a;return n?o.createElement(f,s(s({ref:t},d),{},{components:n})):o.createElement(f,s({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},716:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=n(74011),r=(n(49231),n(54852));const a={category:"Node",hide_table_of_contents:!0,sidebar_position:1e3,code_embed:{params:"view=split,preview&module=index.js&hidenavigation=1",type:"codesandbox",url:"/examples/nodejs"}},s="Node.js Example",i={unversionedId:"documentation/guides/node/nodejs",id:"documentation/guides/node/nodejs",title:"Node.js Example",description:"Demonstates how to use UpscalerJS within a Node.js context.",source:"@site/docs/documentation/guides/node/nodejs.md",sourceDirName:"documentation/guides/node",slug:"/documentation/guides/node/nodejs",permalink:"/documentation/guides/node/nodejs",draft:!1,tags:[],version:"current",sidebarPosition:1e3,frontMatter:{category:"Node",hide_table_of_contents:!0,sidebar_position:1e3,code_embed:{params:"view=split,preview&module=index.js&hidenavigation=1",type:"codesandbox",url:"/examples/nodejs"}},sidebar:"documentationSidebar",previous:{title:"Cloudflare Worker",permalink:"/documentation/guides/browser/implementations/cloudflare-worker"},next:{title:"Node.js Model Guide",permalink:"/documentation/guides/node/nodejs-model"}},p={},l=[{value:"Code",id:"code",level:2}],d={toc:l};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nodejs-example"},"Node.js Example"),(0,r.kt)("p",null,"Demonstates how to use UpscalerJS within a Node.js context."),(0,r.kt)("a",{href:"https://githubbox.com/thekevinscott/upscalerjs/tree/main/examples/nodejs"},"Open in CodeSandbox"),".",(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.tensorflow.org/js/guide/nodejs"},"Tensorflow.js publishes two different libraries for Node.js"),", depending on whether GPU support is required."),(0,r.kt)("p",null,"Similarly, UpscalerJS provides platform-specific builds that parallel Tensorflow.js's platforms."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Technically, importing ",(0,r.kt)("inlineCode",{parentName:"p"},"@tensorflow/tfjs")," is supported on the server, but importing ",(0,r.kt)("inlineCode",{parentName:"p"},"upscaler")," alongside it is ",(0,r.kt)("em",{parentName:"p"},"not")," supported. For Node.js support you'll need to use one of ",(0,r.kt)("inlineCode",{parentName:"p"},"tfjs-node")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"tfjs-node-gpu"),". If support for ",(0,r.kt)("inlineCode",{parentName:"p"},"tfjs")," on the server is important to you, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/thekevinscott/UpscalerJS/issues/new/choose"},"open a feature request"),"!")),(0,r.kt)("p",null,"In this example, we'll be using the Node.js CPU platform. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ensure we load UpscalerJS via")," ",(0,r.kt)("inlineCode",{parentName:"p"},"upscaler/node"),", ",(0,r.kt)("em",{parentName:"p"},"not")," ",(0,r.kt)("inlineCode",{parentName:"p"},"upscaler"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const tf = require('@tensorflow/tfjs-node')\nconst Upscaler = require('upscaler/node') // this is important!\n\nconst upscaler = new Upscaler()\nconst image = tf.node.decodeImage(fs.readFileSync('/path/to/image.png'), 3)\nconst tensor = await upscaler.upscale(image)\nconst upscaledTensor = await tf.node.encodePng(tensor)\nfs.writeFileSync('/path/to/upscaled/image.png', upscaledTensor)\n\n// dispose the tensors!\nimage.dispose()\ntensor.dispose()\nupscaledTensor.dispose()\n")),(0,r.kt)("p",null,"Like the browser version of UpscalerJS, the Node.js version will make a best effort to handle any input we throw at it. The list of supported inputs includes a string to a file path, a ",(0,r.kt)("inlineCode",{parentName:"p"},"Buffer"),", a ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt8Array"),", or a tensor."),(0,r.kt)("p",null,"By default, UpscalerJS will return a tensor when running in Node.js. We can change this to return a base64 string by explicitly specifying the output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const tensor = await upscaler.upscale(image, {\n  output: 'base64',\n})\n")),(0,r.kt)("p",null,"Next, read about how to specify a custom model when running under Node.js."))}c.isMDXComponent=!0}}]);