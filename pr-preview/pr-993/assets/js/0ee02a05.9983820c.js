"use strict";(self.webpackChunk_upscalerjs_docs=self.webpackChunk_upscalerjs_docs||[]).push([[4883],{54852:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(49231);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,w=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?a.createElement(w,i(i({ref:t},c),{},{components:r})):a.createElement(w,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},16732:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=r(74011),n=(r(49231),r(54852));const o={category:"Browser",hide_table_of_contents:!0,sidebar_position:102,parent:"performance",code_embed:{params:"embed=1&file=index.js&hideExplorer=1",type:"stackblitz",url:"/examples/webworker"}},i="Web Worker Integration",s={unversionedId:"documentation/guides/browser/performance/webworker",id:"documentation/guides/browser/performance/webworker",title:"Web Worker Integration",description:"View this page on the UpscalerJS website",source:"@site/docs/documentation/guides/browser/performance/webworker.md",sourceDirName:"documentation/guides/browser/performance",slug:"/documentation/guides/browser/performance/webworker",permalink:"/documentation/guides/browser/performance/webworker",draft:!1,tags:[],version:"current",sidebarPosition:102,frontMatter:{category:"Browser",hide_table_of_contents:!0,sidebar_position:102,parent:"performance",code_embed:{params:"embed=1&file=index.js&hideExplorer=1",type:"stackblitz",url:"/examples/webworker"}},sidebar:"documentationSidebar",previous:{title:"Warming up models",permalink:"/documentation/guides/browser/performance/warmup"},next:{title:"Memory Management",permalink:"/documentation/guides/browser/performance/memory-management"}},l={},p=[{value:"Motivation",id:"motivation",level:2},{value:"Code",id:"code",level:2}],c={toc:p};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"web-worker-integration"},"Web Worker Integration"),(0,n.kt)("a",{class:"docs-link",href:"https://upscalerjs.com/documentation/guides/browser/performance/webworker"},"View this page on the UpscalerJS website"),(0,n.kt)("p",null,"This guide demonstrates how to integrate UpscalerJS into a Web Worker."),(0,n.kt)("a",{href:"https://stackblitz.com/github/thekevinscott/upscalerjs/tree/main/examples/webworker?file=index.js&title=UpscalerJS: Web Worker Integration"},"Open in Stackblitz"),".",(0,n.kt)("h2",{id:"motivation"},"Motivation"),(0,n.kt)("p",null,"Another strategy for speeding up inference calls in the browser is to move the upscaling process to a Web Worker."),(0,n.kt)("p",null,"This guide won't cover how to build a web worker; ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"},"MDN has a great overview of that"),". This guide will instead focus on what's necessary to incorporate UpscalerJS into a web worker."),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"While incorporating a Web Worker will help improve UI performance, it's not a panacea. Larger images, slower models, or older hardware can still suffer from UI jank.")),(0,n.kt)("h2",{id:"code"},"Code"),(0,n.kt)("p",null,"In a Web Worker, we don't have access to ",(0,n.kt)("inlineCode",{parentName:"p"},"HTMLImageElement"),", which means that we need to rely on ",(0,n.kt)("inlineCode",{parentName:"p"},"tensor")," inputs and outputs."),(0,n.kt)("p",null,"In the UI thread, we can load our image and get its data with:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"// UI thread\nconst pixels = tf.browser.fromPixels(image)\nconst data = await pixels.data()\n")),(0,n.kt)("p",null,"When passing messages between a UI thread and a web worker, the data is serialized and then deserialized. Therefore, we need to transform our ",(0,n.kt)("inlineCode",{parentName:"p"},"tensor")," (which is not serializable) into a format that can be serialized."),(0,n.kt)("p",null,"We pass ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," along with the tensor's ",(0,n.kt)("inlineCode",{parentName:"p"},"shape")," to our worker:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"// UI thread\nworker.postMessage([data, pixels.shape])\n")),(0,n.kt)("p",null,"In our worker, we'll turn this into a tensor:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"// Worker thread\nconst tensor = tf.tensor(data, shape)\n")),(0,n.kt)("p",null,"Now we can pass this tensor to our upscaler. We will also specify it's ",(0,n.kt)("inlineCode",{parentName:"p"},"output")," as a ",(0,n.kt)("inlineCode",{parentName:"p"},"tensor"),"; otherwise, we'll get an error (since ",(0,n.kt)("inlineCode",{parentName:"p"},"HTMLImageElement")," is not available):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"// Worker thread\nconst upscaledImg = await upscaler.upscale(tensor, {\n  output: 'tensor',\n})\n")),(0,n.kt)("p",null,"To get our image back to the UI thread, we'll again need to transform it into a serializable format:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"// Worker thread\nconst upscaledShape = upscaledImg.shape\nconst upscaledData = await upscaledImg.data()\npostMessage([upscaledData, upscaledShape])\n")),(0,n.kt)("p",null,"Finally, we receive it in our UI thread and can work with it as normal:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"// UI thread\nworker.onmessage = async (e) => {\n  const [ data, shape ] = e.data\n  const tensor = tf.tensor(data, shape)\n}\n")))}d.isMDXComponent=!0}}]);