"use strict";(self.webpackChunk_upscalerjs_docs=self.webpackChunk_upscalerjs_docs||[]).push([[5756],{54852:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(49231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25043:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(74011),a=(n(49231),n(54852));const o={category:"Browser",hide_table_of_contents:!0,sidebar_position:200,parent:"usage",code_embed:{params:"embed=1&file=index.js&hideExplorer=1",type:"stackblitz",url:"/examples/progress"}},i="Monitoring Progress",s={unversionedId:"documentation/guides/browser/usage/progress",id:"documentation/guides/browser/usage/progress",title:"Monitoring Progress",description:"View this page on the UpscalerJS website",source:"@site/docs/documentation/guides/browser/usage/progress.md",sourceDirName:"documentation/guides/browser/usage",slug:"/documentation/guides/browser/usage/progress",permalink:"/documentation/guides/browser/usage/progress",draft:!1,tags:[],version:"current",sidebarPosition:200,frontMatter:{category:"Browser",hide_table_of_contents:!0,sidebar_position:200,parent:"usage",code_embed:{params:"embed=1&file=index.js&hideExplorer=1",type:"stackblitz",url:"/examples/progress"}},sidebar:"documentationSidebar",previous:{title:"Memory Management",permalink:"/documentation/guides/browser/performance/memory-management"},next:{title:"Cancel Example",permalink:"/documentation/guides/browser/usage/cancel"}},p={},l=[{value:"Specifying a <code>progress</code> Callback Function",id:"specifying-a-progress-callback-function",level:2},{value:"Callback Function",id:"callback-function",level:2}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"monitoring-progress"},"Monitoring Progress"),(0,a.kt)("a",{class:"docs-link",href:"https://upscalerjs.com/documentation/guides/browser/usage/progress"},"View this page on the UpscalerJS website"),(0,a.kt)("p",null,"It can be useful to monitor the progress of an upscale operation, particularly for larger images or heavier models. UpscalerJS provides an easy way to do so."),(0,a.kt)("h2",{id:"specifying-a-progress-callback-function"},"Specifying a ",(0,a.kt)("inlineCode",{parentName:"h2"},"progress")," Callback Function"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"progress")," will ",(0,a.kt)("em",{parentName:"p"},"only")," be called if a ",(0,a.kt)("inlineCode",{parentName:"p"},"patchSize")," is set during an upscale. ",(0,a.kt)("a",{parentName:"p",href:"../performance/patch-sizes"},"Read more about patch sizes here"),".")),(0,a.kt)("p",null,"We can pass a callback function to the ",(0,a.kt)("inlineCode",{parentName:"p"},"upscale")," method that will be called upon on any progress operations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import Upscaler from 'upscaler'\nimport image from '/path/to/image.png'\n\nconst upscaler = new Upscaler()\n\nupscaler.upscale(image, {\n  progress: (percent) => {\n    console.log(`${percent * 100}% of image has been processed`)\n  }\n})\n")),(0,a.kt)("h2",{id:"callback-function"},"Callback Function"),(0,a.kt)("p",null,"In addition to returning the percentage of operation completed, the ",(0,a.kt)("inlineCode",{parentName:"p"},"progress")," callback can accept a few positional other arguments. ",(0,a.kt)("a",{parentName:"p",href:"/documentation/api/upscale#progress"},"The full list of arguments is"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"percent")," - The percentage of the upscale operation completed"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"imageSlice")," - The patch of image being operated upon"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"row")," - The row being operated upon"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"col")," - The column being operated upon")),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"imageSlice")," will be in the format specified by ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," - e.g., if we've specified an ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"tensor"),", we'll receive a ",(0,a.kt)("inlineCode",{parentName:"p"},"tensor")," back in the ",(0,a.kt)("inlineCode",{parentName:"p"},"progress")," function."),(0,a.kt)("p",null,"To change this, we can specify the format we wish to receive in ",(0,a.kt)("inlineCode",{parentName:"p"},"progress")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"progressOutput"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"upscaler.upscale(image, {\n  output: 'tensor',\n  progressOutput: 'base64',\n  progress: (percent, slice) => {\n    // our slice will now be a base64 src, even though the response\n    // from upscale will be a tensor\n    console.log(slice) \n  }\n})\n")),(0,a.kt)("p",null,"As in other operations, when receiving a tensor in the progress callback, ",(0,a.kt)("strong",{parentName:"p"},"we are responsible for disposing of that tensor"),". "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"upscaler.upscale(image, {\n  output: 'tensor',\n  progress: (percent, slice) => {\n    console.log(slice) \n\n    // Now that we're done with our tensor, dispose of it\n    slice.dispose()\n  }\n})\n")),(0,a.kt)("p",null,"Next, we can learn how to cancel an inflight request."))}u.isMDXComponent=!0}}]);