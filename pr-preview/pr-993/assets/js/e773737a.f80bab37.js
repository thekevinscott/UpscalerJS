"use strict";(self.webpackChunk_upscalerjs_docs=self.webpackChunk_upscalerjs_docs||[]).push([[6901],{54852:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(49231);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=n,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return r?a.createElement(g,o(o({ref:t},c),{},{components:r})):a.createElement(g,o({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},32976:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=r(74011),n=(r(49231),r(54852));const i={title:"execute",sidebar_position:1,sidebar_label:"execute"},o="execute",s={unversionedId:"documentation/api/execute",id:"documentation/api/execute",title:"execute",description:"Processes a given image through a specified neural network.",source:"@site/docs/documentation/api/execute.md",sourceDirName:"documentation/api",slug:"/documentation/api/execute",permalink:"/documentation/api/execute",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"execute",sidebar_position:1,sidebar_label:"execute"},sidebar:"documentationSidebar",previous:{title:"constructor",permalink:"/documentation/api/constructor"},next:{title:"upscale",permalink:"/documentation/api/upscale"}},l={},p=[{value:"Example",id:"example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"execute"},"execute"),(0,n.kt)("p",null,"Processes a given image through a specified neural network. "),(0,n.kt)("p",null,"Alias for ",(0,n.kt)("a",{parentName:"p",href:"upscale"},(0,n.kt)("inlineCode",{parentName:"a"},"upscale")),"."),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("p",null,"[object Object]"),(0,n.kt)("small",{className:"gray"},"Defined in ",(0,n.kt)("a",{target:"_blank",href:"https://github.com/thekevinscott/UpscalerJS/tree/main/packages/upscalerjs/src/upscaler.ts#L117"},"upscaler.ts:117")),(0,n.kt)("h2",{id:"parameters"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"image"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"Input"),"  - The image to upscale."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"options"),":  - A set of upscaling arguments.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"signal?"),": ",(0,n.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal"},(0,n.kt)("inlineCode",{parentName:"a"},"AbortSignal")),"  - Provides a mechanism to abort the warmup process. ",(0,n.kt)("a",{parentName:"li",href:"/documentation/guides/browser/usage/cancel"},"For more, see the guides on cancelling requests"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"awaitNextFrame?"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"boolean"),"  - If provided, upscaler will await ",(0,n.kt)("inlineCode",{parentName:"li"},"tf.nextFrame()")," on each cycle. This can be helpful if you need to release for the UI thread or wish to be more responsive to abort signals."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"output?"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"base64 | tensor"),"  - Denotes the kind of response UpscalerJS returns - a base64 string representation of the image, or the tensor. In the browser, this defaults to ",(0,n.kt)("inlineCode",{parentName:"li"},'"base64"')," and in Node.js, to ",(0,n.kt)("inlineCode",{parentName:"li"},'"tensor"'),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"patchSize?"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"number"),"  - Optionally specify an image patch size to operate on. ",(0,n.kt)("a",{parentName:"li",href:"/documentation/guides/browser/performance/patch-sizes"},"For more, see the guide on patch sizes"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"padding?"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"number"),"  - Optionally specify a patch size padding. ",(0,n.kt)("a",{parentName:"li",href:"/documentation/guides/browser/performance/patch-sizes"},"For more, see the guide on patch sizes"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"progress?"),": ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/thekevinscott/UpscalerJS/tree/main/packages/upscalerjs/src/types.ts#L27"},(0,n.kt)("inlineCode",{parentName:"a"},"Progress")),"  - An optional progress callback if ",(0,n.kt)("inlineCode",{parentName:"li"},"upscale")," is called with a ",(0,n.kt)("inlineCode",{parentName:"li"},"patchSize")," argument. ",(0,n.kt)("a",{parentName:"li",href:"/documentation/guides/browser/usage/progress"},"For more, see the guide on progress callbacks"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"progressOutput?"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"base64 | tensor"),"  - Denotes the kind of response UpscalerJS returns within a ",(0,n.kt)("inlineCode",{parentName:"li"},"progress")," callback.")))),(0,n.kt)("h2",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Promise<Tensor3D | string>")," - an upscaled image."))}u.isMDXComponent=!0}}]);