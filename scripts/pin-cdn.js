const fs = require('fs');
const path = require('path');

const ROOT = path.resolve(__dirname, '..');
const UPSCALERJS_ROOT = path.resolve(ROOT, 'packages/upscalerjs');

const ROOT_PACKAGE = require(path.resolve(ROOT, 'package.json'));

const peerDependencies = ROOT_PACKAGE['peerDependencies'];
const version = ROOT_PACKAGE['version'];

console.log(`Pinning version ${version} in CDN definition`);

const writeConstantsFile = (version) => {
  const constants = [
    { key: 'ROOT', val: `https://unpkg.com/@upscalerjs/models@${version}`},
  ];
  const contents = constants.map(({ key, val }) => `export const ${key} = ${JSON.stringify(val)}`).join('\n');
  fs.writeFileSync(
    path.resolve(UPSCALERJS_ROOT, 'src/constants.ts'), 
    `/*****\nThis is an autogenerated file. See scripts/pin-cdn.js for more information.\n*****/\n\n${contents}`
  );
}
writeConstantsFile(version);

const updatePackageJSON = (packagePath, version, callback) => {
  const package = require(packagePath);
  package.version = version;
  if (callback) {
    callback(package);
  }
  fs.writeFileSync(packagePath, JSON.stringify(package, null, 2));
  console.log(`Wrote file ${packagePath}`);
}

const examplesPath = path.resolve(ROOT, 'examples');
const examples = fs.readdirSync(examplesPath)
examples.forEach(example => {
  const dirPath = path.resolve(examplesPath, example);
  if (fs.lstatSync(dirPath).isDirectory()) {
    const examplePackagePath = path.resolve(dirPath, 'package.json');
    updatePackageJSON(examplePackagePath, version, package => {
      if (!package.dependencies) {
        package.dependencies = {};
      }
      package.dependencies.upscaler = version;
      
      package.dependencies['@tensorflow/tfjs'] = peerDependencies['@tensorflow/tfjs'];
    });
  }
});
